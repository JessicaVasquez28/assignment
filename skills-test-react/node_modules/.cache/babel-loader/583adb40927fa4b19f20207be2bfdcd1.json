{"ast":null,"code":"var _jsxFileName = \"/Users/musubimanagement/Desktop/Skills-Test-React/skills-test-react/src/Components/Form/BasicForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik, Field, Form } from 'formik';\nimport { Button, ListItem, ListItemSecondaryAction, ListItemText } from '@mui/material';\nimport List from '@mui/material/List';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveData, deleteData } from '../../Redux/Actions/TodoActions'; //Table Imports\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BasicForm = () => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const dispatch = useDispatch();\n  const toDoArr = useSelector(state => state.todoData.todos);\n\n  const saveToDo = toDoTxt => {\n    //Remove white spaces\n    const trimTxt = toDoTxt.trim(); //Save if not empty\n\n    if (trimTxt.length > 0) {\n      dispatch(saveData(trimTxt));\n    }\n  };\n\n  const deleteTodo = toDoIndex => {\n    dispatch(deleteData(toDoIndex));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TODO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        firstName: '',\n        lastName: '',\n        email: ''\n      },\n      onSubmit: values => {},\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: event => {\n          event.preventDefault();\n          saveToDo(value);\n          setValue('');\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"todo\",\n          children: \"Add ToDo \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"todo\",\n          name: \"Add ToDo\",\n          placeholder: \"TextHere\",\n          onChange: event => {\n            setValue(event.target.value);\n          },\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        margin: '2%'\n      },\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"ToDo List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: toDoArr.map((todo, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: todo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                  onClick: () => {\n                    deleteTodo(index);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this)]\n            }, index.toString(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicForm, \"esq4yDq/F5a1qMOceJQszlkLzWE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = BasicForm;\nexport default BasicForm;\n/*\n\n1) Create states\n\n2)update user input as string in one state string. first onchange ? \n\n3)On submit -> add that user input string to another state Arr\n\n4) map over Arr and present to user including keys\n\n\n\nRedux\n1) Get the user input to update the redux state\n  Action carrying the payload of userinput\n    -on change call the action similar to how we are doing it right now in the regular state\n\n2) Reducer grabs that userinput and updates the ARR of Tasks state\n\n3) Deleting need to get the index/key of that item\n  - Action on click -> send index/key using payload (or custom names)\n  -> Reducer who will remove that index from the state\n\n\n4) Separation of concerns? MDP OR MSP ? Container element with all dispatch + state logic\npassing as props to the actual page similar to MVC \n\n\n\n\n\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicForm\");","map":{"version":3,"names":["React","useState","ReactDOM","Formik","Field","Form","Button","ListItem","ListItemSecondaryAction","ListItemText","List","DeleteIcon","useDispatch","useSelector","saveData","deleteData","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","BasicForm","value","setValue","dispatch","toDoArr","state","todoData","todos","saveToDo","toDoTxt","trimTxt","trim","length","deleteTodo","toDoIndex","firstName","lastName","email","values","event","preventDefault","target","margin","map","todo","index","toString"],"sources":["/Users/musubimanagement/Desktop/Skills-Test-React/skills-test-react/src/Components/Form/BasicForm.js"],"sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik, Field, Form } from 'formik';\nimport { Button, ListItem, ListItemSecondaryAction, ListItemText } from '@mui/material';\nimport List from '@mui/material/List';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport {useDispatch, useSelector} from 'react-redux';\nimport {saveData, deleteData} from '../../Redux/Actions/TodoActions';\n\n//Table Imports\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\n\nconst BasicForm = () => {\n\n\nconst [value, setValue] = useState('');\n\nconst dispatch = useDispatch();\nconst toDoArr = useSelector((state)=>state.todoData.todos);\n\n\n\nconst saveToDo = (toDoTxt) =>{\n  //Remove white spaces\n  const trimTxt = toDoTxt.trim();\n  //Save if not empty\n  if (trimTxt.length > 0){\n    dispatch(saveData(trimTxt));\n  }\n} \n\nconst deleteTodo = (toDoIndex) =>{\n  dispatch(deleteData(toDoIndex));\n}\n\n  return(\n    <div>\n      <h1>TODO</h1>\n      <Formik\n        initialValues={{\n          firstName: '',\n          lastName: '',\n          email: '',\n        }}\n        onSubmit={(values) => {}}\n      >\n        <Form\n        onSubmit={(event)=>{\n          event.preventDefault();\n          saveToDo(value);\n          setValue('');\n        }}\n        >\n          <label htmlFor=\"todo\">Add ToDo </label>\n          <Field id=\"todo\" name=\"Add ToDo\" placeholder=\"TextHere\" \n          onChange={(event)=>{\n            setValue(event.target.value);\n          }}     \n          value={value}      \n          />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n\n      <Paper sx={{margin:'2%'}}>\n                <TableContainer component={Paper}>\n                <Table>\n            \n                  <TableHead>\n                      <TableRow>\n                        <TableCell>ToDo List</TableCell>\n                      </TableRow>\n                  </TableHead>\n                <TableBody>\n                {toDoArr.map((todo ,index) => (\n                  <TableRow key={index.toString()}>\n                  <TableCell>{todo}</TableCell>\n                    <TableCell>\n                      <DeleteIcon \n                      onClick={() =>{\n                        deleteTodo(index);\n                      }}\n                  />\n                    </TableCell>\n                  </TableRow>\n\n                  \n                ))}\n                </TableBody>\n\n      \n                </Table>\n\n                </TableContainer>\n\n\n      </Paper>\n\n    </div>\n  );\n};\nexport default BasicForm\n\n\n/*\n\n1) Create states\n\n2)update user input as string in one state string. first onchange ? \n\n3)On submit -> add that user input string to another state Arr\n\n4) map over Arr and present to user including keys\n\n\n\nRedux\n1) Get the user input to update the redux state\n  Action carrying the payload of userinput\n    -on change call the action similar to how we are doing it right now in the regular state\n\n2) Reducer grabs that userinput and updates the ARR of Tasks state\n\n3) Deleting need to get the index/key of that item\n  - Action on click -> send index/key using payload (or custom names)\n  -> Reducer who will remove that index from the state\n\n\n4) Separation of concerns? MDP OR MSP ? Container element with all dispatch + state logic\npassing as props to the actual page similar to MVC \n\n\n\n\n\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module"}